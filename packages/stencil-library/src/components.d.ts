/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AssessmentData } from "./components/assessment-form/assessment-form";
export { AssessmentData } from "./components/assessment-form/assessment-form";
export namespace Components {
    interface AssessmentForm {
        "assessmentData": AssessmentData;
    }
    interface BooleanField {
        "isRequired": boolean;
        "labelFalse": string;
        "labelTrue": string;
        "name": string;
        "title": string;
        "value": boolean;
    }
    interface CheckboxField {
        "choices": string[];
        "isRequired": boolean;
        "name": string;
        "questionTitle": string;
        "value": string[];
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface RadioGroup {
        "choices": string[];
        "isRequired": boolean;
        "name": string;
        "questionTitle": string;
        "value": string;
    }
    interface TextField {
        "isRequired": boolean;
        "name": string;
        "questionTitle": string;
        "value": string;
    }
}
export interface AssessmentFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAssessmentFormElement;
}
export interface BooleanFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBooleanFieldElement;
}
export interface CheckboxFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCheckboxFieldElement;
}
export interface RadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRadioGroupElement;
}
export interface TextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTextFieldElement;
}
declare global {
    interface HTMLAssessmentFormElementEventMap {
        "completion": any;
        "pageChange": any;
    }
    interface HTMLAssessmentFormElement extends Components.AssessmentForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAssessmentFormElementEventMap>(type: K, listener: (this: HTMLAssessmentFormElement, ev: AssessmentFormCustomEvent<HTMLAssessmentFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAssessmentFormElementEventMap>(type: K, listener: (this: HTMLAssessmentFormElement, ev: AssessmentFormCustomEvent<HTMLAssessmentFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAssessmentFormElement: {
        prototype: HTMLAssessmentFormElement;
        new (): HTMLAssessmentFormElement;
    };
    interface HTMLBooleanFieldElementEventMap {
        "valueChange": any;
    }
    interface HTMLBooleanFieldElement extends Components.BooleanField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBooleanFieldElementEventMap>(type: K, listener: (this: HTMLBooleanFieldElement, ev: BooleanFieldCustomEvent<HTMLBooleanFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBooleanFieldElementEventMap>(type: K, listener: (this: HTMLBooleanFieldElement, ev: BooleanFieldCustomEvent<HTMLBooleanFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBooleanFieldElement: {
        prototype: HTMLBooleanFieldElement;
        new (): HTMLBooleanFieldElement;
    };
    interface HTMLCheckboxFieldElementEventMap {
        "valueChange": any;
    }
    interface HTMLCheckboxFieldElement extends Components.CheckboxField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCheckboxFieldElementEventMap>(type: K, listener: (this: HTMLCheckboxFieldElement, ev: CheckboxFieldCustomEvent<HTMLCheckboxFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCheckboxFieldElementEventMap>(type: K, listener: (this: HTMLCheckboxFieldElement, ev: CheckboxFieldCustomEvent<HTMLCheckboxFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCheckboxFieldElement: {
        prototype: HTMLCheckboxFieldElement;
        new (): HTMLCheckboxFieldElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLRadioGroupElementEventMap {
        "valueChange": any;
    }
    interface HTMLRadioGroupElement extends Components.RadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRadioGroupElementEventMap>(type: K, listener: (this: HTMLRadioGroupElement, ev: RadioGroupCustomEvent<HTMLRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRadioGroupElementEventMap>(type: K, listener: (this: HTMLRadioGroupElement, ev: RadioGroupCustomEvent<HTMLRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRadioGroupElement: {
        prototype: HTMLRadioGroupElement;
        new (): HTMLRadioGroupElement;
    };
    interface HTMLTextFieldElementEventMap {
        "valueChange": any;
    }
    interface HTMLTextFieldElement extends Components.TextField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTextFieldElementEventMap>(type: K, listener: (this: HTMLTextFieldElement, ev: TextFieldCustomEvent<HTMLTextFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTextFieldElementEventMap>(type: K, listener: (this: HTMLTextFieldElement, ev: TextFieldCustomEvent<HTMLTextFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTextFieldElement: {
        prototype: HTMLTextFieldElement;
        new (): HTMLTextFieldElement;
    };
    interface HTMLElementTagNameMap {
        "assessment-form": HTMLAssessmentFormElement;
        "boolean-field": HTMLBooleanFieldElement;
        "checkbox-field": HTMLCheckboxFieldElement;
        "my-component": HTMLMyComponentElement;
        "radio-group": HTMLRadioGroupElement;
        "text-field": HTMLTextFieldElement;
    }
}
declare namespace LocalJSX {
    interface AssessmentForm {
        "assessmentData"?: AssessmentData;
        "onCompletion"?: (event: AssessmentFormCustomEvent<any>) => void;
        "onPageChange"?: (event: AssessmentFormCustomEvent<any>) => void;
    }
    interface BooleanField {
        "isRequired"?: boolean;
        "labelFalse"?: string;
        "labelTrue"?: string;
        "name"?: string;
        "onValueChange"?: (event: BooleanFieldCustomEvent<any>) => void;
        "title"?: string;
        "value"?: boolean;
    }
    interface CheckboxField {
        "choices"?: string[];
        "isRequired"?: boolean;
        "name"?: string;
        "onValueChange"?: (event: CheckboxFieldCustomEvent<any>) => void;
        "questionTitle"?: string;
        "value"?: string[];
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface RadioGroup {
        "choices"?: string[];
        "isRequired"?: boolean;
        "name"?: string;
        "onValueChange"?: (event: RadioGroupCustomEvent<any>) => void;
        "questionTitle"?: string;
        "value"?: string;
    }
    interface TextField {
        "isRequired"?: boolean;
        "name"?: string;
        "onValueChange"?: (event: TextFieldCustomEvent<any>) => void;
        "questionTitle"?: string;
        "value"?: string;
    }
    interface IntrinsicElements {
        "assessment-form": AssessmentForm;
        "boolean-field": BooleanField;
        "checkbox-field": CheckboxField;
        "my-component": MyComponent;
        "radio-group": RadioGroup;
        "text-field": TextField;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "assessment-form": LocalJSX.AssessmentForm & JSXBase.HTMLAttributes<HTMLAssessmentFormElement>;
            "boolean-field": LocalJSX.BooleanField & JSXBase.HTMLAttributes<HTMLBooleanFieldElement>;
            "checkbox-field": LocalJSX.CheckboxField & JSXBase.HTMLAttributes<HTMLCheckboxFieldElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "radio-group": LocalJSX.RadioGroup & JSXBase.HTMLAttributes<HTMLRadioGroupElement>;
            "text-field": LocalJSX.TextField & JSXBase.HTMLAttributes<HTMLTextFieldElement>;
        }
    }
}
